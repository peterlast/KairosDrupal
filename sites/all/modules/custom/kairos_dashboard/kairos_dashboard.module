<?php
	/**
	 * Implements hook_menu().
	 */
	function kairos_dashboard_menu() {
		 $items['my-dashboard'] = array(
		 	'title' => 'Dashboard',
      		'page callback' => 'kairos_dashboard_main_dashboard',
    		'access arguments' => array('access content'),
    		'type' => MENU_CALLBACK,      		
      		//'page arguments' => array(1),
    	);
    	
    	$items['kairos-form-ajax'] = array(
    		'page callback' => 'kairos_dashboard_get_form_for_ajax',
    		'access arguments' => array('create milestone', 'create project'),
    		'type' => MENU_CALLBACK,
    	);
    	
    	return $items;
	}
	
	/**
	 * Implements hook_init().
	 */
	function kairos_dashboard_init() {
		// Since this file should only be loaded on the front page, 
		// it cannot be declared in the info file.
		if (drupal_is_front_page()) {
			drupal_add_js(drupal_get_path('module', 'kairos_dashboard') . '/js/frontpage.js');
		}
	}
	
	/**
	 * Menu callback for rendering just a form via AJAX.
	 */
	function kairos_dashboard_get_form_for_ajax($node_type = '') {
		if (empty($node_type)) {
			return drupal_not_found();
		} 
		
		module_load_include('inc', 'node', 'node.pages'); 
		
		$form_id = $node_type . '_node_form';
		// maybe add current users info
		global $user;
		// create a blank node
		$node = new stdClass();
		$node->uid = $user->uid;
		$node->name = (isset($user->name) ? $user->name : '');
		$node->type = $node_type;
		
		// Invoke hook_nodapi and hook_node
		node_object_prepare($node);
		
		$output = drupal_get_form($form_id, $node);
  
  		echo drupal_render($output); 
  		drupal_exit();
	}
	
	/**
	 * Menu callback for displaying the primary dashboard to a user.
	 *
	 * Grab all the milestones from now to three months from now and
	 * compile statistics on those milestones. The statistics are stored
	 * as a sparse matrix with project as the first key and date as the
	 * second and the value of the milestone size.
	 *
	 */
	function kairos_dashboard_main_dashboard() {
		global $user;

		// Reject anonymous users.
		if ($user->uid == 0) {
			drupal_not_found();
		}
		// Query for the milestones belonging to this user and
		// within the time limit (now to 3 months from now).
		$date_format = "Y-m-d H:i:s";
		$query = new EntityFieldQuery();
		$query->entityCondition('entity_type', 'node')
		    ->entityCondition('bundle', 'milestone')
		    ->propertyCondition('status', 1)
		    ->fieldCondition('field_milestone_date', 
		    	'value', 
		    	array(date($date_format), date($date_format, time() + 60*60*24*30*3)),
		    	'BETWEEN') 
		    ->addMetaData('account', $user);
		$result = $query->execute();

		if (isset($result['node'])) {
		  $milestones_nids = array_keys($result['node']);
		  $milestones = entity_load('node', $milestones_nids);
		}		

		// Compile statistics for milestones and append to settings.
		$data = array();
		$projects = array();
		foreach ($milestones as $milestone_entity_id => $milestone) {
			// Add an entry to the corresponding project data array.
			$project = node_load($milestone->field_project[LANGUAGE_NONE][0]['nid']);
			$milestone_date = $milestone->field_milestone_date[LANGUAGE_NONE][0]['value'];
			$milestone_date = date('Ymd', strtotime($milestone_date));
			$milestone_size = $milestone->field_milestone_size[LANGUAGE_NONE][0]['value'];
			// If it doesn't exist, create it.
			if (!isset($data[$project->nid])) {
				$data[$project->nid] = array();
				$projects[$project->nid] = $project->title;
			}
			$data[$project->nid][$milestone_date] = $milestone_size;
		}

		// Create xaxis labels.
		$xaxis = array();
		for($i = 0;$i < 30; $i++) {
			if($i%7 == 0)
				$xaxis[$i] = date('Ymd', strtotime('+' . $i . ' days'));
			else {
				$xaxis[$i] = '';
			}
		}
		// Create blank xaxis values array.
		$blank = array();
		foreach($xaxis as $date) {
			$blank[$date] = 0;
		}

		// For each project...
		$series = array();
		$index = 0;
		foreach ($data as $project_nid => $milestone_dates) {
			// ...setup base series value data... 
			$series[] = array(
				'type' => 'column',
				'name' => $projects[$project_nid],
				'data' => $blank,
			);
			// ...for each milestone date, set value in array.
			foreach ($milestone_dates as $milestone_date => $value) {
				$series[$index]['data'][$milestone_date] = $value;
			}
			$series[$index]['data'] = array_values($series[$index]['data']);

			// Update index of what project we're working on now.
			$index++;
		}

		// // Create basic "series" array for chart JS.
		// $series = array(
		// 	array(
		// 		'type' => 'column',
		// 		'name' => 'Project1',
		// 		'data' => array(
		// 			3,
		// 			2,
		// 			1,
		// 			3,
		// 			4,
		// 		),
		// 	),
		// 	array(
		// 		'type' => 'column',
		// 		'name' => 'Project2',
		// 		'data' => array(
		// 			2,
		// 			7,
		// 			4,
		// 			8,
		// 			9,
		// 		),
		// 	),
		// );

		drupal_add_js(array('kairosDashboardXaxis' => $xaxis), 'setting');
		drupal_add_js(array('kairosDashboardSeries' => $series), 'setting');
		//drupal_add_js(array('kairosDashboardSeries' => $series), 'setting');
		drupal_add_js(array('kairosDashboardMilestones' => $data), 'setting');
		drupal_add_js(array('kairosDashboardProjects' => $projects), 'setting');

		// Append JSFiddle graphings libs
		drupal_add_js('http://code.highcharts.com/highcharts.js', 'external');
		drupal_add_js('http://code.highcharts.com/modules/exporting.js', 'external');

		drupal_add_js(drupal_get_path('module', 'kairos_dashboard') . '/js/dashboard.js', 'file');
		
		// Add date picker CSS/JS
		drupal_add_js('/misc/ui/jquery.ui.datepicker.min.js');
		drupal_add_js(drupal_get_path('module', 'date') . '/date_popup/jquery.timeentry.pack.js');
		drupal_add_css('/misc/ui/jquery.ui.datepicker.css');
		drupal_add_css(drupal_get_path('module', 'date') . '/date_popup/jquery.timeentry.css');

		// Fin
		return '<div id="foobar"></div>';
	}