<?php
	/**
	 * Implements hook_menu().
   */
  //my-

	function kairos_dashboard_menu() {
		 $items['my-dashboard'] = array(
		 	'title' => 'Dashboard',
      		'page callback' => 'kairos_dashboard_main_dashboard',
    		'access arguments' => array('access content'),
    		'type' => MENU_CALLBACK,      		
      		//'page arguments' => array(1),
    	);
    	return $items;
	}

	/**
	 * Menu callback for displaying the primary dashboard to a user.
	 *
	 * Grab all the milestones from now to three months from now and
	 * compile statistics on those milestones. The statistics are stored
	 * as a sparse matrix with project as the first key and date as the
	 * second and the value of the milestone size.
	 *
	 */
	function kairos_dashboard_main_dashboard() {
		global $user;

		// Reject anonymous users.
		if ($user->uid == 0) {
			drupal_not_found();
		}
		// Query for the milestones belonging to this user and
    // within the time limit (now to numDaysToDsplay from now).
    $numDaysToDisplay = 30;
		$date_format = "Y-m-d H:i:s";
		$query = new EntityFieldQuery();
		$query->entityCondition('entity_type', 'node')
		    ->entityCondition('bundle', 'milestone')
		    ->propertyCondition('status', 1)
		    ->fieldCondition('field_milestone_date', 
		    	'value', 
		    	array(date($date_format), date($date_format, time() + 60*60*24*$numDaysToDisplay)),
		    	'BETWEEN') 
		    ->addMetaData('account', $user);
		$result = $query->execute();

		if (isset($result['node'])) {
		  $milestones_nids = array_keys($result['node']);
		  $milestones = entity_load('node', $milestones_nids);
		}		

		// Compile statistics for milestones and append to settings.
		$data = array();
		$projects = array();
		foreach ($milestones as $milestone_entity_id => $milestone) {
			// Add an entry to the corresponding project data array.
			$project = node_load($milestone->field_project[LANGUAGE_NONE][0]['nid']);
			$milestone_date = $milestone->field_milestone_date[LANGUAGE_NONE][0]['value'];
			$milestone_date = date('Ymd', strtotime($milestone_date));
			$milestone_size = $milestone->field_milestone_size[LANGUAGE_NONE][0]['value'];
			// If it doesn't exist, create it.
			if (!isset($data[$project->nid])) {
				$data[$project->nid] = array();
				$projects[$project->nid] = $project->title;
			}
			$data[$project->nid][$milestone_date] = $milestone_size;
		}

		// Create xaxis labels.
		$xaxis = array();
		for($i = 0;$i < $numDaysToDisplay; $i++) {
			/*if($i%7 == 0) {
				$xaxis[$i] = date('Ymd', strtotime('+' . $i . ' days'));
      }
      else {
				$xaxis[$i] = "";
      }*/
      $xaxis[$i] = date('Ymd', strtotime('+' . $i . ' days'));
		}
		// Create blank xaxis values array.
		$blank = array();
		foreach($xaxis as $date) {
			$blank[$date] = 0;
		}

		// For each project...
		$series = array();
		$index = 0;
		foreach ($data as $project_nid => $milestone_dates) {
			// ...setup base series value data... 
			$series[] = array(
				'type' => 'column',
				'name' => $projects[$project_nid],
				'data' => $blank,
			);
			// ...for each milestone date, set value in array.
			foreach ($milestone_dates as $milestone_date => $value) {
				$series[$index]['data'][$milestone_date] = intval($value);
      }
			$series[$index]['data'] = array_values($series[$index]['data']);

			// Update index of what project we're working on now.
			$index++;
    }

    //for the projected workload spline

    //construct an array with combined milestone weights
    $sumMilestones = array_values($blank);
    for ($day=0; $day<count($sumMilestones); $day++) {
      $sumMilestone = 0;
      foreach($series as $project) {
        $sumMilestone += $project['data'][$day];
      }
      $sumMilestones[$day] = $sumMilestone;
    }

    //compute spline weights
    $splineWeight = array_values($blank);
    for ($day=0; $day<$numDaysToDisplay; $day++) {
      for($index=0; $index<7; $index++) {
        if($day+$index < $numDaysToDisplay) {
          $splineWeight[$day] += $sumMilestones[$day+$index]/($index+1);
        } 
      }
    }

    //create spline
    $splineSeries = array(
      'title' => "spline",
      'name' => "Projected Workload",
      'data' => $splineWeight,
      'marker' => array(
        'enabled' =>false
       )
    );
    array_push($series, $splineSeries);

		drupal_add_js(array('kairosDashboardXaxis' => $xaxis), 'setting');
		drupal_add_js(array('kairosDashboardSeries' => $series), 'setting');
		drupal_add_js(array('kairosDashboardMilestones' => $data), 'setting');
		drupal_add_js(array('kairosDashboardProjects' => $projects), 'setting');
		drupal_add_js(array('kairosDashboardBlank' => $blank), 'setting');
		drupal_add_js(array('kairosDashboardNumDaysDisplayed' => $numDaysToDisplay), 'setting');
		drupal_add_js(array('kairosDashboardSumMilestones' => $sumMilestones), 'setting');
	  drupal_add_js(array('kairosDashboardSplineWeights' => $splineWeight), 'setting');
    
    // Append JSFiddle graphings libs
		drupal_add_js('http://code.highcharts.com/highcharts.js', 'external');
		drupal_add_js('http://code.highcharts.com/modules/exporting.js', 'external');

		drupal_add_js(drupal_get_path('module', 'kairos_dashboard') . '/js/dashboard.js', 'file');

		// Fin
		return '<div id="foobar"></div>';
	}
